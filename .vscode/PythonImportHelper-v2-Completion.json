[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.migrations.0001_initial",
        "description": "app.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=250)),",
        "detail": "app.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.migrations.0002_alter_book_options_alter_category_options_and_more",
        "description": "app.migrations.0002_alter_book_options_alter_category_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('app', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='book',\n            options={'ordering': ['-id'], 'verbose_name': 'Kitob ', 'verbose_name_plural': 'Kitoblar'},\n        ),\n        migrations.AlterModelOptions(",
        "detail": "app.migrations.0002_alter_book_options_alter_category_options_and_more",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display=[\"id\",\"name\",\"created_date\",\"updated_date\"]\n    list_display_links=[\"id\",\"name\",]\n    list_filter=[\"id\",\"name\",]\n    search_fields=[\"name\"]\nadmin.site.register(Category,CategoryAdmin)\nadmin.site.register(Book)\nadmin.site.register(Rent)\nadmin.site.register(Customer)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "app.apps",
        "description": "app.apps",
        "peekOfCode": "class AppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'app'",
        "detail": "app.apps",
        "documentation": {}
    },
    {
        "label": "TimeStampModel",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class TimeStampModel(models.Model):\n    created_date=models.DateTimeField(auto_now_add=True)\n    updated_date=models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract=True\nclass Category(TimeStampModel):\n    name = models.CharField(max_length=250,verbose_name=\"nomi\")\n    place = models.TextField(blank=True,null=True,verbose_name=\"joyi\")\n    class Meta:\n        verbose_name_plural=\"Kategoriyalar\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Category(TimeStampModel):\n    name = models.CharField(max_length=250,verbose_name=\"nomi\")\n    place = models.TextField(blank=True,null=True,verbose_name=\"joyi\")\n    class Meta:\n        verbose_name_plural=\"Kategoriyalar\"\n        verbose_name=\"Kategoriya \"\n    def __str__(self) -> str:\n        return self.name\nclass Book(TimeStampModel):\n    image = models.FileField(upload_to=\"%d_%m_%Y/\",verbose_name=\"rasm\")",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Book(TimeStampModel):\n    image = models.FileField(upload_to=\"%d_%m_%Y/\",verbose_name=\"rasm\")\n    name = models.CharField(max_length=250,verbose_name=\"nomi\")\n    category = models.ForeignKey(\n        Category,\n        related_name='books',\n        on_delete=models.CASCADE,\n        verbose_name=\"kategoriya\"\n    )\n    place = models.TextField(blank=True,null=True,verbose_name=\"joyi\")",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Customer(TimeStampModel):\n    first_name = models.CharField(max_length=250,verbose_name=\"ismi\")\n    last_name = models.CharField(max_length=250,verbose_name=\"familiyasi\")\n    location = models.TextField(verbose_name=\"manzili\")\n    id_card = models.TextField(verbose_name=\"passport seriasi\")\n    class Meta:\n        verbose_name_plural=\"Mijozlar\"\n        verbose_name=\"Mijoz \"\n    def __str__(self) -> str:\n        return f\"{self.first_name} {self.last_name}\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Rent",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Rent(TimeStampModel):\n    book = models.ForeignKey(\n        Book,\n        related_name=\"rents\",\n        on_delete=models.CASCADE,\n        verbose_name=\"kitob\"\n    )\n    customer = models.ForeignKey(\n        Customer,\n        related_name=\"rents\",",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\n    def __init__(self, *args, **kwargs):\n        super(BookSerializer, self).__init__(*args, **kwargs)",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BookSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\n    def __init__(self, *args, **kwargs):\n        super(BookSerializer, self).__init__(*args, **kwargs)\n        request=self.context.get(\"request\")\n        if request and request.method == \"GET\":\n            category=request.GET.get('category')=='true'\n            if category:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "CustomerSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class CustomerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Customer\n        fields = '__all__'\nclass RentSerializer(serializers.ModelSerializer):\n    def __init__(self, *args, **kwargs):\n        super(RentSerializer, self).__init__(*args, **kwargs)\n        request = self.context.get(\"request\")\n        if request and request.method == \"GET\":\n            book = request.GET.get('book') == 'true'",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "RentSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class RentSerializer(serializers.ModelSerializer):\n    def __init__(self, *args, **kwargs):\n        super(RentSerializer, self).__init__(*args, **kwargs)\n        request = self.context.get(\"request\")\n        if request and request.method == \"GET\":\n            book = request.GET.get('book') == 'true'\n            if book:\n                self.fields[\"book\"] = BookSerializer(context=self.context)\n            customer = request.GET.get('customer') == 'true'\n            if customer:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.urls",
        "description": "app.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(\"categories\", CategoryViewSet)\nrouter.register(\"books\", BookViewSet)\nrouter.register(\"rents\", RentViewSet)\nrouter.register(\"customers\", CustomerViewSet)\nurlpatterns=router.urls",
        "detail": "app.urls",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    @action(methods=[\"GET\"],detail=False)\n    def search(self,request,*args,**kwargs):\n        query=request.GET.get(\"query\")\n        queryset = self.filter_queryset(self.get_queryset())\n        queryset=queryset.filter(name__icontains=query)\n        page = self.paginate_queryset(queryset)\n        if page is not None:",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "BookViewSet",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    @action(methods=[\"GET\"],detail=False)\n    def search(self,request,*args,**kwargs):\n        query=request.GET.get(\"query\")\n        queryset = self.filter_queryset(self.get_queryset())\n        queryset=queryset.filter(name__icontains=query)\n        page = self.paginate_queryset(queryset)\n        if page is not None:",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "CustomerViewSet",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class CustomerViewSet(viewsets.ModelViewSet):\n    queryset = Customer.objects.all()\n    serializer_class = CustomerSerializer\nclass RentViewSet(viewsets.ModelViewSet):\n    queryset = Rent.objects.all()\n    serializer_class = RentSerializer\nclass EmptyDataView(APIView):\n    def get(self, request, *args, **kwargs):\n        return Response({\"data\": []}, status=status.HTTP_200_OK)\nclass EmptyPostDataView(APIView):",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "RentViewSet",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class RentViewSet(viewsets.ModelViewSet):\n    queryset = Rent.objects.all()\n    serializer_class = RentSerializer\nclass EmptyDataView(APIView):\n    def get(self, request, *args, **kwargs):\n        return Response({\"data\": []}, status=status.HTTP_200_OK)\nclass EmptyPostDataView(APIView):\n    def get(self, request, *args, **kwargs):\n        return Response(status=status.HTTP_201_CREATED)",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "EmptyDataView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class EmptyDataView(APIView):\n    def get(self, request, *args, **kwargs):\n        return Response({\"data\": []}, status=status.HTTP_200_OK)\nclass EmptyPostDataView(APIView):\n    def get(self, request, *args, **kwargs):\n        return Response(status=status.HTTP_201_CREATED)",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "EmptyPostDataView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class EmptyPostDataView(APIView):\n    def get(self, request, *args, **kwargs):\n        return Response(status=status.HTTP_201_CREATED)",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.asgi",
        "description": "project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv(\"DEBUG\")\nALLOWED_HOSTS = [\"127.0.0.1\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv(\"DEBUG\")\nALLOWED_HOSTS = [\"127.0.0.1\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG = os.getenv(\"DEBUG\")\nALLOWED_HOSTS = [\"127.0.0.1\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"127.0.0.1\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'app'\n]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'project.urls'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'uz-uz'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=BASE_DIR/\"static\"\nMEDIA_URL = 'media/'\nMEDIA_ROOT=BASE_DIR/\"media\"",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=BASE_DIR/\"static\"\nMEDIA_URL = 'media/'\nMEDIA_ROOT=BASE_DIR/\"media\"\n# Default primary key field type",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=BASE_DIR/\"static\"\nMEDIA_URL = 'media/'\nMEDIA_ROOT=BASE_DIR/\"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=BASE_DIR/\"static\"\nMEDIA_URL = 'media/'\nMEDIA_ROOT=BASE_DIR/\"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT=BASE_DIR/\"static\"\nMEDIA_URL = 'media/'\nMEDIA_ROOT=BASE_DIR/\"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nMEDIA_ROOT=BASE_DIR/\"media\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"api/v1/\",include(\"app.urls\"))\n]+static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.wsgi",
        "description": "project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]